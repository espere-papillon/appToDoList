{"version":3,"sources":["serviceWorker.ts","api/api.ts","state/tasks-reducer.ts","state/app-reducer.ts","utils/error-utils.ts","state/todolists-reducer.ts","state/auth-reducer.ts","state/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","ToDoList.tsx","TodolistsList.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitle","model","authAPI","data","initialState","status","error","isInitialized","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","changeTodolistEntityStatusAC","entityStatus","fetchTodosThunk","getState","then","res","todolists","catch","isLoggedIn","setIsLoggedInAC","value","rootReducer","combineReducers","tasks","state","action","copyState","todolistID","filter","task","taskID","stateCopy","todoListId","newTasks","updateTasks","map","el","todilist","todoListID","forEach","tl","newFilter","app","auth","store","createStore","applyMiddleware","thunk","Alert","props","elevation","variant","ErrorSnackbar","useSelector","dispath","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resultCode","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","React","memo","useState","setTitle","setError","addItem","trim","helperText","onChange","e","currentTarget","onKeyPress","key","disabled","IconButton","onClick","AddBox","EditableSpan","console","log","editMode","setEditMode","autoFocus","onBlur","changeTitle","onDoubleClick","Task","changeTaskTitle","changeTaskStatus","removeTasks","ListItem","className","Completed","checked","New","Delete","ToDoList","removeTask","useCallback","changeStatus","newTitle","useEffect","setTasksAC","items","todoListFilter","t","getTasksForTodoList","setAll","changeTodoListFilter","setActive","setCompleted","addTask","allBtnClass","activeBtnClass","completedBtnClass","changeTodoListTitle","removeTodoList","List","marginRight","size","TodolistsList","todoListComponents","todoLists","Paper","padding","AddTodoList","spacing","AppWithRedux","finally","addTaskTC","updatedTask","find","changeTaskStatusAC","updateTaskStatusTC","changeTaskTitleAC","updateTaskTitleTC","ChangeTodoListFilterAC","RemoveTodoListAC","addTodolistTC","ChangeTodolistTitleAC","updateTodolistTitleTC","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c047b526.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '2915ec48-57be-426d-903d-1c83b1420c90'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: string, email: string, login: string}>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{}>>('auth/login')\r\n    }\r\n}","import {v1} from \"uuid\";\r\nimport {AddTodoListAT, changeTodolistEntityStatusAC, RemoveTodoListAT, SetTodosAT} from \"./todolists-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {TaskType, todolistsAPI} from \"../api/api\";\r\nimport {TasksStateType} from \"../AppWithRedux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: \"REMOVE_TASK\",\r\n    taskID: string,\r\n    todolistID: string,\r\n}\r\n\r\ntype AddTaskActionType = ReturnType<typeof addTaskAC>\r\n\r\ntype ChangeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\ntype ChangeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport type ActionType = RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n    | SetTodosAT\r\n    | SetTasksActionType\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"REMOVE_TASK\": {\r\n            let copyState = {...state}\r\n            copyState[action.todolistID] = copyState[action.todolistID].filter(task => task.id !== action.taskID)\r\n            return copyState\r\n        }\r\n        case \"ADD_TASK\": {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case \"CHANGE_TASK_STATUS\": {\r\n            let copyState = {...state}\r\n            let updateTasks = copyState[action.todolistID].map(el => {\r\n                if (el.id === action.taskID) {\r\n                    return {...el, status: action.status}\r\n                }\r\n                return el\r\n            })\r\n            return {...state, [action.todolistID]: updateTasks}\r\n        }\r\n        case \"CHANGE_TASK_TITLE\": {\r\n            let copyState = {...state}\r\n            let updateTasks = copyState[action.todolistID].map(el => {\r\n                if (el.id === action.taskID) {\r\n                    return {...el, title: action.title}\r\n                }\r\n                return el\r\n            })\r\n            return {...state, [action.todolistID]: updateTasks}\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {...state, [action.todilist.id]: []}\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            let copyState = {...state}\r\n            delete copyState[action.todoListID]\r\n            return copyState\r\n        }\r\n        case \"SET-TODOLISTS\": {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case \"SET-TASKS\": {\r\n            const copyState = {...state}\r\n            copyState[action.todolistId] = action.tasks\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE_TASK\", taskID, todolistID}\r\n}\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD_TASK', task} as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskID: string, status: TaskStatuses, todolistID: string) => {\r\n    return {type: \"CHANGE_TASK_STATUS\", taskID, status, todolistID} as const\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string) => {\r\n    return {type: \"CHANGE_TASK_TITLE\", taskID, title, todolistID} as const\r\n}\r\n\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\n\r\nexport const fetchTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusTC = (id: string, status: TaskStatuses, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const updatedTask = tasksForCurrentTodolist.find(t => {\r\n            return t.id === id\r\n        })\r\n\r\n        if (updatedTask) {\r\n            const model = {...updatedTask, status}\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, id, model)\r\n                .then((res) => {\r\n                    dispatch(changeTaskStatusAC(res.data.data.item.id, res.data.data.item.status, res.data.data.item.todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    handleServerNetworkError(dispatch, error.message)\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (id: string, title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const updatedTask = tasksForCurrentTodolist.find(t => {\r\n            return t.id === id\r\n        })\r\n\r\n        if (updatedTask) {\r\n            const model = {...updatedTask, title}\r\n            dispatch(setAppStatusAC('loading'))\r\n            todolistsAPI.updateTask(todolistId, id, model)\r\n                .then((res) => {\r\n                    dispatch(changeTaskTitleAC(res.data.data.item.id, res.data.data.item.title, res.data.data.item.todoListId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    handleServerNetworkError(dispatch, error.message)\r\n                })\r\n        }\r\n    }\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\ntype ActionType = SetAppStatusAT | SetAppErrorAT | SetIsInitializedAT\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => {return {type: 'APP/SET-STATUS', status} as const}\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatusAC>\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport type SetAppErrorAT = ReturnType<typeof setAppErrorAC>\r\n\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\nexport type SetIsInitializedAT = ReturnType<typeof setIsInitializedAC>","import {setAppErrorAC, SetAppErrorAT, setAppStatusAC, SetAppStatusAT} from \"../state/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/api\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<ServerErrorAT>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerAppError = <T>(dispatch: Dispatch<ServerErrorAT>, data: ResponseType<T>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Error'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ServerErrorAT = SetAppStatusAT | SetAppErrorAT","import {FilterValuesTypes} from \"../AppWithRedux\";\r\nimport {todolistsAPI, TodolistType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\n\r\nexport type RemoveTodoListAT = ReturnType<typeof RemoveTodoListAC>\r\n\r\nexport type AddTodoListAT = ReturnType<typeof AddTodolistAC>\r\n\r\ntype ChangeTodoListTitleAT = ReturnType<typeof ChangeTodolistTitleAC>\r\n\r\ntype ChangeTodoListFilterAT = {\r\n    type: \"CHANGE-TODOLIST-FILTER\"\r\n    newFilter: FilterValuesTypes\r\n    todoListID: string\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesTypes\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ChangeTodoListTitleAT\r\n    | ChangeTodoListFilterAT\r\n    | SetTodosAT\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todoListID)\r\n        case \"ADD-TODOLIST\":\r\n            return [{\r\n                ...action.todilist,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            },\r\n                ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todoListID ? {...tl, filter: action.newFilter} : tl)\r\n        case \"SET-TODOLISTS\":\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: \"all\",\r\n                entityStatus: \"idle\"\r\n            }))\r\n        case \"CHANGE-TODOLIST-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (id: string) => {\r\n    return {type: \"REMOVE-TODOLIST\", todoListID: id} as const\r\n}\r\n\r\nexport const AddTodolistAC = (todilist: TodolistType) => {\r\n    return {type: \"ADD-TODOLIST\", todilist} as const\r\n}\r\n\r\nexport const ChangeTodolistTitleAC = (title: string, todoListID: string) => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", title, todoListID} as const\r\n}\r\n\r\nexport const ChangeTodoListFilterAC = (newFilter: FilterValuesTypes, todoListID: string): ChangeTodoListFilterAT => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", newFilter, todoListID}\r\n}\r\n\r\nexport const setTodosAC = (todolists: Array<TodolistType>) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TODOLIST-STATUS', id, entityStatus} as const\r\n}\r\n\r\nexport type SetTodosAT = ReturnType<typeof setTodosAC>\r\n\r\nexport const fetchTodosThunk = (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setTodosAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(AddTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages[0]))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(changeTodolistEntityStatusAC(id, \"loading\"))\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTodolist(id).then(res => {\r\n        dispatch(RemoveTodoListAC(id))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n}\r\n\r\nexport const updateTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                const action = ChangeTodolistTitleAC(title, id)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n    }\r\n}","import {authAPI, LoginDataType} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SetAppErrorAT, setAppStatusAC, SetAppStatusAT, setIsInitializedAC} from \"./app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: \"login/SET-IS-LOGGED-IN\", value} as const)\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\ntype ActionType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusAT | SetAppErrorAT\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const loginTC = (data: LoginDataType) => (dispatch: Dispatch<ActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(dispatch, res.data)\r\n        }\r\n    })\r\n        .finally(() => {\r\n                dispatch(setIsInitializedAC(true))\r\n            }\r\n        )\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(dispatch, res.data)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error)\r\n        })\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {setAppErrorAC} from \"../../state/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispath = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispath(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../state/auth-reducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    type ValidateType = {email: string, password: string, rememberMe: boolean}\r\n    const validate = (values: ValidateType) => {\r\n        const errors = {} as ValidateType\r\n        if (!values.email) {\r\n            errors.email = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n        }\r\n        if (!values.password) {\r\n            errors.password = 'Required';\r\n        } else if (values.password.length < 5) {\r\n            errors.password = 'Must be 6 characters or more';\r\n        }\r\n\r\n        return errors\r\n    }\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            //alert(JSON.stringify(values))\r\n        }\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? (<div style={{color: \"red\"}}>{formik.errors.email}</div>) : null}\r\n                    <TextField\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        margin=\"normal\"\r\n                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password ? (<div style={{color: \"red\"}}>{formik.errors.password}</div>) : null}\r\n                    <FormControlLabel\r\n                        label={'Remember me'}\r\n                        control={<Checkbox />}\r\n                        {...formik.getFieldProps('remembersMe')}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {KeyboardEvent, ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void // родительский callback\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        error && setError(null)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addItem = () => {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addItem(title)\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n        setTitle(\"\")\r\n    }\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\")\r\n            addItem()\r\n    }\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"} error={!!error}\r\n                       helperText={error} value={title}\r\n                       onChange={changeTitle} onKeyPress={onKeyPressAddItem}\r\n            disabled={props.entityStatus === \"loading\"}/>\r\n            <IconButton color={\"primary\"} onClick={addItem} disabled={props.entityStatus === \"loading\"}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {KeyboardEvent, ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    // const [error, setError] = useState<boolean>(false)\r\n    const onEditMode = () => setEditMode(true)\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        // const trimmedTitle = title.trim()\r\n        // if (trimmedTitle) {\r\n        props.changeTitle(title)\r\n        // } else {\r\n        //     setError(true)\r\n        // }\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editMode ? <TextField color={\"primary\"} variant={\"standard\"} value={title} autoFocus={true} onBlur={offEditMode} onChange={changeTitle} />\r\n            // <input value={title} autoFocus={true} onBlur={offEditMode} onChange={changeTitle}/>\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"./api/api\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTasks: (taskId: string) => void\r\n    changeTaskTitle: (taskId: string, title: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses) => void\r\n}\r\n\r\nexport const Task = React.memo(({task, changeTaskTitle, changeTaskStatus, removeTasks}: TaskPropsType) => {\r\n    console.log('Task called')\r\n\r\n    const removeTask = () => removeTasks(task.id)\r\n    const changeStatus = (event: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, event.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New)\r\n    const changeTitle = (title: string) => changeTaskTitle(task.id, title)\r\n\r\n    return (\r\n        <ListItem key={task.id} className={task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n            <Checkbox color={\"primary\"} checked={task.status === TaskStatuses.Completed} onChange={changeStatus} />\r\n            <EditableSpan title={task.title} changeTitle={changeTitle}/>\r\n            <IconButton onClick={removeTask}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useEffect} from \"react\";\r\nimport {FilterValuesTypes} from \"./AppWithRedux\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton, List, ListItem} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskStatuses, TaskType} from \"./api/api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchTasksTC} from \"./state/tasks-reducer\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype ToDoListPropsType = {\r\n    id: string\r\n    title: string\r\n    todoListFilter: FilterValuesTypes\r\n    tasks: Array<TaskType>\r\n    entityStatus: RequestStatusType\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTasks: (taskID: string, todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesTypes, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport const ToDoList = React.memo((props: ToDoListPropsType) => {\r\n    const removeTask = useCallback((taskId: string) => props.removeTasks(taskId, props.id), [props.removeTasks, , props.id])\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses) => props.changeTaskStatus(taskId, status, props.id), [props.changeTaskStatus, props.id])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string) => props.changeTaskTitle(taskId, newTitle, props.id), [props.changeTaskTitle, props.id])\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [])\r\n\r\n    const tasks = getTasksForTodoList().map(task => <Task\r\n        key={task.id}\r\n        task={task}\r\n        removeTasks={removeTask}\r\n        changeTaskStatus={changeStatus}\r\n        changeTaskTitle={changeTaskTitle}/>)\r\n\r\n    const setAll = useCallback(() => props.changeTodoListFilter(\"all\", props.id), [props.changeTodoListFilter,\r\n        props.id]);\r\n    const setActive = useCallback(() => props.changeTodoListFilter(\"active\", props.id),\r\n        [props.changeTodoListFilter, props.id]);\r\n    const setCompleted = useCallback(() => props.changeTodoListFilter(\"completed\", props.id),\r\n        [props.changeTodoListFilter, props.id]);\r\n\r\n    const addTask = useCallback((title: string) => props.addTask(title, props.id), [props.addTask, props.id])\r\n\r\n\r\n    const allBtnClass = props.todoListFilter === \"all\" ? \"active-filter\" : \"\";\r\n    const activeBtnClass = props.todoListFilter === \"active\" ? \"active-filter\" : \"\";\r\n    const completedBtnClass = props.todoListFilter === \"completed\" ? \"active-filter\" : \"\"\r\n    const removeTodoList = () => props.removeTodoList(props.id)\r\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.id)\r\n\r\n    function getTasksForTodoList(): Array<TaskType> {\r\n        switch (props.todoListFilter) {\r\n            case \"active\":\r\n                return props.tasks.filter(t => t.status === TaskStatuses.New)\r\n            case \"completed\":\r\n                return props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n            default:\r\n                return props.tasks\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === \"loading\"}>\r\n                    <Delete/>\r\n                </IconButton>\r\n                {/*<button onClick={removeTodoList}>X</button>*/}\r\n            </h3>\r\n            <AddItemForm addItem={addTask} entityStatus={props.entityStatus}/>\r\n            <List>\r\n                {tasks}\r\n            </List>\r\n            <div>\r\n                <Button style={{marginRight: \"5px\"}} size={\"small\"} color={\"primary\"}\r\n                        variant={props.todoListFilter === \"all\" ? \"contained\" : \"outlined\"} className={allBtnClass}\r\n                        onClick={setAll}>All</Button>\r\n                <Button style={{marginRight: \"5px\"}} size={\"small\"} color={\"primary\"}\r\n                        variant={props.todoListFilter === \"active\" ? \"contained\" : \"outlined\"}\r\n                        className={activeBtnClass} onClick={setActive}>Active</Button>\r\n                <Button style={{marginRight: \"5px\"}} size={\"small\"} color={\"primary\"}\r\n                        variant={props.todoListFilter === \"completed\" ? \"contained\" : \"outlined\"}\r\n                        className={completedBtnClass} onClick={setCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {FilterValuesTypes, TasksStateType} from \"./AppWithRedux\";\r\nimport {TaskStatuses} from \"./api/api\";\r\nimport {fetchTodosThunk, TodolistDomainType} from \"./state/todolists-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {ToDoList} from \"./ToDoList\";\r\nimport React, {useEffect} from \"react\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Redirect, Route} from \"react-router-dom\";\r\nimport {Login} from \"./features/Login/Login\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\ntype PropsType = {\r\n    todoLists: Array<TodolistDomainType>\r\n    tasks: TasksStateType\r\n    addTask: (title: string, todoListID: string) => void\r\n    removeTasks: (taskID: string, todoListID: string) => void\r\n    changeTodoListFilter: (newFilterValue: FilterValuesTypes, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    changeTodoListTitle: (title: string, todoListID: string) => void\r\n    AddTodoList: (title: string) => void\r\n}\r\n\r\nexport const TodolistsList = (props: PropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodosThunk)\r\n    }, [])\r\n\r\n    const todoListComponents = props.todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={4} style={{padding: \"20px\"}}>\r\n                    <ToDoList\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={props.tasks[tl.id]}\r\n                        todoListFilter={tl.filter}\r\n                        entityStatus={tl.entityStatus}\r\n                        addTask={props.addTask}\r\n                        removeTasks={props.removeTasks}\r\n                        changeTodoListFilter={props.changeTodoListFilter}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        removeTodoList={props.removeTodoList}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        changeTodoListTitle={props.changeTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isLoggedIn) {\r\n        return <>\r\n            <Redirect to={'/login'}/></>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: \"20px 0\"}}>\r\n            <AddItemForm addItem={props.AddTodoList} entityStatus={\"idle\"}/>\r\n        </Grid>\r\n        <Grid container={true} spacing={4}>\r\n            {todoListComponents}\r\n        </Grid>\r\n    </>\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {\r\n    AppBar,\r\n    Button, CircularProgress,\r\n    Container,\r\n    Grid,\r\n    IconButton,\r\n    LinearProgress,\r\n    Paper,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistTC,\r\n    ChangeTodoListFilterAC, fetchTodosThunk, removeTodolistTC, TodolistDomainType, updateTodolistTitleTC\r\n} from \"./state/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    removeTaskTC, TaskStatuses, updateTaskStatusTC, updateTaskTitleTC\r\n} from \"./state/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {TaskType} from \"./api/api\";\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {NavLink, Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"./features/Login/Login\";\r\nimport {initializedAppTC, logoutTC} from \"./state/auth-reducer\";\r\nimport {TodolistsList} from \"./TodolistsList\";\r\n\r\nexport type FilterValuesTypes = \"all\" | \"active\" | \"completed\"\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesTypes\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    // BLL:\r\n    let todoLists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    let tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    let status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(fetchTodosThunk)\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n\r\n\r\n    const removeTasks = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [])\r\n    // const addTask = useCallback((title: string, todoListID: string) => {\r\n    //     dispatch(addTaskAC(title, todoListID))\r\n    // }, [dispatch])\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk);\r\n    }, []);\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskStatusTC(taskId, status, todoListID))\r\n    }, [])\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListID: string) => {\r\n        dispatch(updateTaskTitleTC(taskId, title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((newFilter: FilterValuesTypes, todoListID: string) => {\r\n        dispatch(ChangeTodoListFilterAC(newFilter, todoListID))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodolistTC(todoListID))\r\n    }, [])\r\n    const AddTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [])\r\n    const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n        dispatch(updateTodolistTitleTC(todoListID, title))\r\n    }, [])\r\n\r\n    // UI:\r\n    // const todoListComponents = todoLists.map(tl => {\r\n    //     return (\r\n    //         <Grid item key={tl.id}>\r\n    //             <Paper elevation={4} style={{padding: \"20px\"}}>\r\n    //                 <ToDoList\r\n    //                     id={tl.id}\r\n    //                     title={tl.title}\r\n    //                     tasks={tasks[tl.id]}\r\n    //                     todoListFilter={tl.filter}\r\n    //                     entityStatus={tl.entityStatus}\r\n    //                     addTask={addTask}\r\n    //                     removeTasks={removeTasks}\r\n    //                     changeTodoListFilter={changeTodoListFilter}\r\n    //                     changeTaskStatus={changeTaskStatus}\r\n    //                     removeTodoList={removeTodoList}\r\n    //                     changeTaskTitle={changeTaskTitle}\r\n    //                     changeTodoListTitle={changeTodoListTitle}\r\n    //                 />\r\n    //             </Paper>\r\n    //         </Grid>\r\n    //     )\r\n    // })\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoList\r\n                    </Typography>\r\n                    {isLoggedIn && <Button variant={\"outlined\"} color=\"inherit\" onClick={() => dispatch(logoutTC())}>Log out</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() =>\r\n                        <TodolistsList\r\n                        todoLists={todoLists}\r\n                        tasks={tasks}\r\n                        addTask={addTask}\r\n                        removeTasks={removeTasks}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        AddTodoList={AddTodoList}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        />\r\n                    //     <>\r\n                    //     <Grid container style={{padding: \"20px 0\"}}>\r\n                    //         <AddItemForm addItem={AddTodoList} entityStatus={\"idle\"}/>\r\n                    //     </Grid>\r\n                    //     <Grid container={true} spacing={4}>\r\n                    //         {todoListComponents}\r\n                    //     </Grid>\r\n                    // </>\r\n                    }/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <AppWithRedux/>\r\n        </HashRouter>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}